#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )

${symbol_pound} This file is for externalizing/internationalizing domain-level messages, which describe the domain model
${symbol_pound} rather than general UI components.

${symbol_pound} Field labels are keyed in a format like so: com.expressui.sample.entity.Contact.mailingAddress.street,
${symbol_pound} where properties can be deeply nested. The starting point of the type tree is the class of the object
${symbol_pound} bound to a UI component like a Form or Results. Each display field bounded to a nested property
${symbol_pound} can be mapped to an internationalized label. Tooltips are mapped simply by appending .tooltip to the
${symbol_pound} end of the property path.
${symbol_pound}
${symbol_pound} If no message is found here, then ExpressUI looks for @Label and @Tooltip annotations on properties
${symbol_pound} in the code. If these are not found, then ExpressUI automatically generates labels from property names
${symbol_pound} in the code.
${symbol_pound}
${symbol_pound} You can also set and internationalize labels programmatically, which overrides any annotations or messages found here.
${symbol_pound}
${symbol_pound} ExpressUI also provides alternate ways of mapping labels and tooltips here.
${symbol_pound} For example, if the root domain type bound to a UI component were Contact, then you could map street with either:
${symbol_pound}   com.expressui.sample.entity.Contact.mailingAddress.street=street
${symbol_pound}   or
${symbol_pound}   com.expressui.sample.entity.Address.street=street
${symbol_pound} If both exist, then com.expressui.sample.entity.Contact.mailingAddress.street has priority because it is more specific.
${symbol_pound} However, com.expressui.sample.entity.Address.street would still apply to
${symbol_pound} com.expressui.sample.entity.Contact.billingAddress.street if that were not specifically mapped.
${symbol_pound}
${symbol_pound} The same prioritization logic applies to tooltips.

${package}.MyApplication=${artifactId} Application

${package}.view.PersonPage=People

${package}.entity.Person=Person
${package}.entity.Person.firstName=First Name
${package}.entity.Person.lastName=Last Name
